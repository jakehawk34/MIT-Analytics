nrow(HighSodium)
# Subset of USDA data frame with foods that have greater than 10000 mg of Sodium
HighSodium = subset(USDA, Sodium > 10000)
nrow(HighSodium)
# Get the names of the foods in the HighSodium subset
HighSodium$Description
# Track down the word "CAVIAR" in the description vector of USDA
match("CAVIAR", USDA$Description)
# Get Sodium level in CAVIAR
USDA$Sodium[4154]
USDA$Sodium[match("CAVIAR", USDA$Description)]
summary(USDA$Sodium)
sdu(USDA$Sodium)
sdu(USDA$Sodium, na.rm=TRUE)
sd(USDA$Sodium) # Forgot to remove na values
sd(USDA$Sodium, na.rm=TRUE)
# Scatter plot of Protein on x-axis and Total Fat on y-axis
plot(USDA$Protein, USDA$TotalFat)
plot(USDA$Protein, USDA$TotalFat, xlab="Protein", ylab="Fat", main="Protein vs Fat")
# Histogram of VitaminC
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C Levels")
hist(USDA$VitaminC, xlab = "Vitamin C (mg)", main = "Histogram of Vitamin C Levels", xlim = c(0, 100))
# Breaks 2000 mg range of data into 100, 20-mg levels and shows us the first five levels
hist(USDA$VitaminC, xlab = "Vitamin C (mg)", main = "Histogram of Vitamin C Levels", xlim = c(0, 100), breaks = 100)
# Set breaks to 2000
hist(USDA$VitaminC, xlab = "Vitamin C (mg)", main = "Histogram of Vitamin C Levels", xlim = c(0, 100), breaks = 2000)
# Box plot for Sugar
boxplot(USDA$Sugar, main = "Box Plot of Sugar Levels", ylab = "Sugar (g)")
# Add a new variable to the data frame
USDA$Sodium[1] > mean(USDA$Sodium, na.rm = TRUE)
USDA$Sodium[50] > mean(USDA$Sodium, na.rm = TRUE)
str(HighSodium)
View(HighSodium)
View(HighSodium)
USDA = read.csv("USDA.csv")
# Add a new variable to the data frame
# 1 if a food has higher than the average Sodium content, 0 for lower
USDA$Sodium[1] > mean(USDA$Sodium, na.rm = TRUE)
USDA$Sodium[50] > mean(USDA$Sodium, na.rm = TRUE)
HighSodium = USDA$Sodium > mean(USDA$Sodium, na.rm = TRUE)
str(HighSodium)
HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm = TRUE))
str(HighSodium)
# Adds the HighSodium variable to the USDA data frame
USDA$HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm = TRUE))
str(USDA)
# Add HighProtein, HighFat, HighCarbs variables
USDA$HighProtein = as.numeric(USDA$Protein > mean(USDA$Protein, na.rm = TRUE))
USDA$HighFat = as.numeric(USDA$TotalFat > mean(USDA$TotalFat, na.rm = TRUE))
USDA$HighCarbs = as.numeric(USDA$Carbohydrate > mean(USDA$Carbohydrate, na.rm = TRUE))
str(USDA)
# Understand our data and the relationships using tables and tapply
table(USDA$HighSodium)
table(USDA$HighSodium, USDA$HighFat)
# Average amount of iron sorted by high and low protein
tapply(USDA$Iron, USDA$HighProtein, mean, na.rm = TRUE)
#
tapply(USDA$VitaminC, USDA$HighCarbs, max, na.rm = TRUE)
tapply(USDA$VitaminC, USDA$HighCarbs, summary, na.rm = TRUE)
setwd("~/Documents/GitHub/MIT-Analytics")
gwd()
gwd
gwd()
?gwd
??gwd
getwd()
mvt = read.csv("mvtWeek1.csv")
str(mvt)
summary(mvt)
max(mvt$ID)
# Minimum of Beat
min(mvt$Beat)
# Number of observations with Arrest equal to TRUE
15536
# Number of observations with LocationDescription equal to ALLEY
match(USDA$LocationDescription, "ALLEY")
# Number of observations with LocationDescription equal to ALLEY
match(mvt$LocationDescription, "ALLEY")
# Number of observations with LocationDescription equal to ALLEY
Alley = (match(mvt$LocationDescription, "ALLEY") == 1)
summary(Alley)
# First entry in Date variable
mvt$Date[1]
# Convert characters into a Date object
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
summary(DateConvert)
# Extract the month and day of the week
mvt$Month = months(DateConvert)
mvt$Weekday = weekdays(DateConvert)
mvt$Date = DateConvert
# Day of the week in which the least amount of motor vehicle thefts occurred
table(mvt$Weekday)
# Day of the week in which the least amount of motor vehicle thefts occurred
min(table(mvt$Weekday))
# Day of the week in which the least amount of motor vehicle thefts occurred
which.min(table(mvt$Weekday))
# Month in which the least amount of motor vehicle thefts occurred
which.min(table(mvt$Month))
# Month in which the least amount of motor vehicle thefts occurred
table(mvt$Month)
# Month in which the least amount of motor vehicle thefts occurred
which.min(table(mvt$Month))
# Weekday on which the most motor vehicle thefts occurred
which.max(table(mvt$Weekday))
# Month with the most arrests made
tapply(mvt$Month, mvt$Arrest, summary, na.rm=TRUE)
# Month with the most arrests made
tapply(mvt$Month, mvt$Arrest)
# Month with the most arrests made
plot(mvt$Month, mvt$Arrest)
# Month with the most arrests made
table(mvt$Month, mvt$Arrest == TRUE)
# Month with the most arrests made
which.max(table(mvt$Month, mvt$Arrest == TRUE))
# Month with the most arrests made
max(table(mvt$Month, mvt$Arrest == TRUE))
# Month with the most arrests made
table(mvt$Month, mvt$Arrest == TRUE)
# Month with the most arrests made
table(mvt$Month, mvt$Arrest)
# Month with the most arrests made
Arrests = table(mvt$Month, mvt$Arrest)
str(Arrests)
# Month with the most arrests made
table(mvt$Month, mvt$Arrest)
# Histogram of the Date variable
hist(mvt$Date, breaks = 100)
# Box plot of the Date variable sorted by Arrest variable
boxplot(mvt$Date, mvt$Arrest)
# Proportion of motor vehicle thefts in 2001 where an arrest was made
table(mvt$Date)
# Proportion of motor vehicle thefts in 2001 where an arrest was made
mvt$Date == 2001
# Proportion of motor vehicle thefts in 2001 where an arrest was made
mvt$Date == %2001%
# Proportion of motor vehicle thefts in 2001 where an arrest was made
Arrests2001 = subset(mvt, mvt$Date > 2000-12-31 & mvt$Date < 2002-01-01)
# Proportion of motor vehicle thefts in 2001 where an arrest was made
Arrests2001 = subset(mvt, mvt$Date > 2000-12-31)
# Proportion of motor vehicle thefts in 2001 where an arrest was made
Arrests2001 = subset(mvt, mvt$Date > 2001-01-01)
head(Arrests2001)
# Proportion of motor vehicle thefts in 2001 where an arrest was made
Arrests2001 = subset(mvt, mvt$Year == 2001)
head(Arrests2001)
table(Arrests2001$Arrest)
(Arrests2001$Arrest == TRUE) / length(Arrests2001
summary(Arrests2001$Arrest)
summary(Arrests2001$Arrest)
Arrests2001$Arrest[1]
(2152) / (18517 + 2152)
# Proportion of motor vehicle thefts in 2001 where an arrest was made
Arrests2007 = subset(mvt, mvt$Year == 2007)
table(Arrests2007$Arrest)
(1212) / (1212 + 13068)
# Proportion of motor vehicle thefts in 2012 where an arrest was made
Arrests2012 = subset(mvt, mvt$Year == 2012)
table(Arrests2012$Arrest)
(550) / (550 + 13542)
# Top five locations where motor vehicle thefts occur
sort(table(mvt$LocationDescription))
# Top five locations where motor vehicle thefts occur
sort(table(mvt$LocationDescription))[-5:]
# Top five locations where motor vehicle thefts occur
sort(table(mvt$LocationDescription))[20]
# Top five locations where motor vehicle thefts occur
locations = sort(table(mvt$LocationDescription))
locations.length
length(locations)
locations[74:78]
locations[73:78]
# Top five locations data set
Top5 = subset(mvt, mvt$LocationDescription == "DRIVEWAY - RESIDENTIAL" |
mvt$LocationDescription == "GAS STATION" |
mvt$LocationDescription == "ALLEY " |
mvt$LocationDescription == "PARKING LOT/GARAGE(NON.RESID.)" |
mvt$LocationDescription == "STREET")
summary(Top5)
Top5$LocationDescription = factor(Top5$LocationDescription)
table(Top5)
table(Top5$LocationDescription)
str(Top5)
# Day of the week where most vehicle thefts occur at gas stations
table(Top5$LocationDescription, Top5$Weekday)
# Day of the week where most vehicle thefts occur at gas stations
tapply(Top5$LocationDescription, Top5$Weekday, max)
# Day of the week where most vehicle thefts occur at gas stations
tapply(Top5$LocationDescription, Top5$Weekday, summary)
# Day of the week where most vehicle thefts occur at gas stations
which.max(Top5$LocationDescription, Top5$Weekday)
# Day of the week where most vehicle thefts occur at gas stations
which.max(Top5$LocationDescription)
# Day of the week where most vehicle thefts occur at gas stations
max(Top5$LocationDescription)
# Day of the week where most vehicle thefts occur at gas stations
tapply(Top5$LocationDescription, Top5$Weekday)
# Day of the week where most vehicle thefts occur at gas stations
table(Top5$LocationDescription, Top5$Weekday)
# Day of the week where most vehicle thefts occur at gas stations
table(Top5$LocationDescription == "GAS STATION", Top5$Weekday)
#Day of the week where fewest vehicle thefts occur in residential driveways
table(Top5$LocationDescription == "DRIVEWAY - RESIDENTIAL", Top5$Weekday)
# Month in which the least amount of motor vehicle thefts occurred
which.min(table(mvt$Month))
# Month with the most arrests made
table(mvt$Month, mvt$Arrest)
# Box plot of the Date variable sorted by Arrest variable
boxplot(mvt$Date ~ mvt$Arrest)
(1212) / (1212 + 13068)
(550) / (550 + 13542)
LocationDescription=="GAS STATION" |
str(Top5)
# Top five locations data set
Top5 = subset(mvt, mvt$LocationDescription == "DRIVEWAY - RESIDENTIAL" |
mvt$LocationDescription == "GAS STATION" |
mvt$LocationDescription == "ALLEY " |
mvt$LocationDescription == "PARKING LOT/GARAGE(NON.RESID.)" |
mvt$LocationDescription == "STREET")
# Top five locations data set
Top5 = subset(mvt, mvt$LocationDescription == "DRIVEWAY - RESIDENTIAL" |
mvt$LocationDescription == "GAS STATION" |
mvt$LocationDescription == "ALLEY" |
mvt$LocationDescription == "PARKING LOT/GARAGE(NON.RESID.)" |
mvt$LocationDescription == "STREET")
str(Top5)
Top5$LocationDescription = factor(Top5$LocationDescription)
table(Top5$LocationDescription)
table(Top5$LocationDescription, Top5$Arrest)
table(Top5$LocationDescription, Top5$Arrest)[1][1]
table(Top5$LocationDescription, Top5$Arrest)[1][2] / (table(Top5$LocationDescription, Top5$Arrest)[1][1] + table(Top5$LocationDescription, Top5$Arrest)[1][2])
table(Top5$LocationDescription, Top5$Arrest)[1][1] + table(Top5$LocationDescription, Top5$Arrest)[1][2]
table(Top5$LocationDescription, Top5$Arrest)[1][1]
table(Top5$LocationDescription, Top5$Arrest)[1][2]
table(Top5$LocationDescription, Top5$Arrest)[2][1]
table(Top5$LocationDescription, Top5$Arrest)[2][2]
table(Top5$LocationDescription, Top5$Arrest)[2][0]
table(Top5$LocationDescription, Top5$Arrest)
249 / (2059+249)
132 / (1543+132)
439 / (439+1672)
1603 / (1603+13249)
11595 / (11595+114969)
# Day of the week where most vehicle thefts occur at gas stations
table(Top5$LocationDescription == "GAS STATION", Top5$Weekday)
#Day of the week where fewest vehicle thefts occur in residential driveways
table(Top5$LocationDescription == "DRIVEWAY - RESIDENTIAL", Top5$Weekday)
IBM = read.csv("IBM.csv")
GE = read.csv("GE.csv")
ProcterGamble = read.csv("ProcterGamble.csv")
CocaCola = read.csv("CocaCola.csv")
Boeing = read.csv("Boeing.csv")
setwd("~/Documents/GitHub/MIT-Analytics")
#   Date: the date of the stock price, always given as the first of the month.
#   StockPrice: the average stock price of the company in the given month.
getwd()
IBM = read.csv("IBM.csv")
GE = read.csv("GE.csv")
ProcterGamble = read.csv("ProcterGamble.csv")
CocaCola = read.csv("CocaCola.csv")
Boeing = read.csv("Boeing.csv")
Boeing = read.csv("BoeingStock.csv")
IBM = read.csv("IBMStock.csv")
GE = read.csv("GEStock.csv")
ProcterGamble = read.csv("ProcterGambleStock.csv")
CocaCola = read.csv("CocaColaStock.csv")
Boeing = read.csv("BoeingStock.csv")
IBM$Date = as.Date(IBM$Date, "%m/%d/%y")
GE$Date = as.Date(GE$Date, "%m/%d/%y")
CocaCola$Date = as.Date(CocaCola$Date, "%m/%d/%y")
ProcterGamble$Date = as.Date(ProcterGamble$Date, "%m/%d/%y")
Boeing$Date = as.Date(Boeing$Date, "%m/%d/%y")
head(Boeing)
tail(Boeing)
summary(Boeing)
str(Boeing)
sd(Boeing)
sd(Boeing$StockPrice)
str(IBM)
summary(IBM)
sd(IBM$StockPrice)
str(GE)
summary(GE)
sd(GE$StockPrice)
str(CocaCola)
summary(CocaCola)
sd(CocaCola$StockPrice)
str(ProcterGamble)
summary(ProcterGamble)
sd(ProcterGamble$StockPrice)
str(Boeing)
summary(Boeing)
sd(Boeing$StockPrice)
# Mean StockPrice of IBM for the time period
mean(IBM$StockPrice)
# Maximum StockPrice of CocaCola
max(CocaCola$StockPrice)
# Median StockPrice of Boeing
median(Boeing$StockPrice)
sd(ProcterGamble$StockPrice)
# Date vs StockPrice for Coca Cola
plot(CocaCola$Date, CocaCola$StockPrice)
# Date vs StockPrice for Coca Cola
plot(CocaCola$Date, CocaCola$StockPrice, type = "l")
# Add the line for Procter & Gamble
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
# Date vs StockPrice for Coca Cola
plot(CocaCola$Date, CocaCola$StockPrice, type = "l", col = "red")
# Add the line for Procter & Gamble
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = "blue")
# Generates a vertical line at March 1, 2000
abline(v=as.Date(c("2000-03-01")), lwd=2)
# Plot the CocaCola stock prices from 1995 through 2005
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
plot(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], col = "blue")
# Plot the CocaCola stock prices from 1995 through 2005
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], col = "blue")
lines(IBM$Date[301:432], IBM$StockPrice[301:432], col = "green")
lines(GE$Date[301:432], GE$StockPrice[301:432], col = "orange")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], col = "black")
# Add vertical lines at September 1997 and November 1997
abline(v=as.Date(c("1997-09-01")), lwd=2)
abline(v=as.Date(c("1997-11-01")), lwd=2)
abline(v=as.Date(c("2005-12-01")), lwd=2)
abline(v=as.Date(c("2004-01-01")), lwd=2)
# Use the tapply command to calculate the mean stock price of IBM, sorted by months
tapply(IBM$StockPrice, months(IBM$Date))
# Use the tapply command to calculate the mean stock price of IBM, sorted by months
tapply(IBM, months(IBM$Date))
# Use the tapply command to calculate the mean stock price of IBM, sorted by months
tapply(IBM$StockPrice, months(IBM$Date))
# Use the tapply command to calculate the mean stock price of IBM, sorted by months
tapply(IBM$StockPrice, months(IBM$Date), mean)
mean(IBM$StockPrice)
tapply(GE$StockPrice, months(GE$Date), mean)
mean(GE$StockPrice)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)
mean(CocaCola$StockPrice)
tapply(ProcterGamble$StockPrice, months(ProcterGamble$Date), mean)
mean(ProcterGamble$StockPrice)
tapply(Boeing$StockPrice, months(Boeing$Date), mean)
mean(Boeing$StockPrice)
# GE and Coca Cola both have their highest average stock price in April
which.max(tapply(GE$StockPrice, months(GE$Date), mean))
which.max(tapply(CocaCola$StockPrice, months(CocaCola$Date), mean))
setwd("~/Documents/GitHub/MIT-Analytics")
CPS = read.csv("CPSData.csv")
CPS = read.csv("CPSData.csv")
summary(CPS)
str(CPS)
tapply(CPS$Industry, max)
table(CPS$Industry)
max(table(CPS$Industry))
which.max(table(CPS$Industry))
sort(table(CPS$State))
table(CPS$Citizenship)
(116639 + 7073) / (116639 + 7073 + 7590)
table(CPS$Race)
tapply(CPS$Race, CPS$Hispanic, summary)
tapply(CPS$Race, CPS$Hispanic, sum)
plot(CPS$Race ~ CPS$Hispanic)
plot(CPS$Race~CPS$Hispanic)
tapply(CPS$Race, CPS$Hispanic == 1)
tapply(CPS$Race, CPS$Hispanic)
plot(CPS$Race, CPS$Hispanic)
hist(CPS$Race)
hist(table(CPS$Race)
hist(table(CPS$Race))
hist(tapply(CPS$Race))
hist(CPS$Race)
table(CPS$Race)
bar(table(CPS$Race))
barplot(table(CPS$Race))
str(mvt)
mvt = read.csv("mvtWeek1.csv")
str(mvt)
CPS = read.csv("CPSData.csv")
summary(CPS)
str(CPS)
subset(CPS, CPS$Hispanic)
subset(CPS, CPS$Hispanic == 1)
table(CPS$Race, subset(CPS, CPS$Hispanic == 1))
table(CPS$Race, subset(CPS, CPS$Hispanic))
table(CPS$Race, CPS$Hispanic, subset(CPS, CPS$Hispanic == 1))
table(CPS$Race, CPS$Hispanic)
summary(CPS)
CPS = read.csv("CPSData.csv", stringsAsFactors = TRUE)
summary(CPS)
# Breakdown of whether Married is missing based on the reported value of the Region variable
table(CPS$Region, is.na(CPS$Married))
table(CPS$Sex, is.na(CPS$Married))
table(CPS$Age, is.na(CPS$Married))
table(CPS$Citizenship, is.na(CPS$Married))
table(CPS$State, is.na(CPS$MetroAreaCode))
table(CPS$Region, is.na(CPS$MetroAreaCode))
tapply(CPS$State, is.na(CPS$MetroAreaCode), mean)
tapply(CPS$State, mean(is.na(CPS$MetroAreaCode))
tapply(CPS$State, mean(is.na(CPS$MetroAreaCode)))
tapply(CPS$State, is.na(CPS$MetroAreaCode))
tapply(CPS$State, is.na(CPS$MetroAreaCode), mean)
tapply(CPS$State, is.na(CPS$MetroAreaCode) - 1, mean)
tapply(CPS$State, is.na(CPS$MetroAreaCode) - 1)
mean(is.na(CPS$MetroAreaCode))
table(CPS$State, mean(is.na(CPS$MetroAreaCode)))
table(CPS$State, CPS$MetroAreaCode, mean)
table(CPS$MetroAreaCode, mean)
table(CPS$MetroAreaCode, CPS$State, mean)
table(CPS$MetroAreaCode, CPS$State)
tapply(CPS$MetroAreaCode, CPS$State)
tapply(CPS$MetroAreaCode, CPS$State, mean)
tapply(is.na(CPS$MetroAreaCode), CPS$State, mean)
sort(tapply(is.na(CPS$MetroAreaCode), CPS$State, mean))
MetroAreaMap = read.csv("MetroAreaCodes.csv", stringsAsFactors = TRUE)
CountryMap = read.csv("CountryCodes.csv", stringsAsFactors = TRUE)
# The following command merges the two data frames on these columns,
# overwriting the CPS data frame with the result:
CPS = merge(CPS, MetroAreaMap, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
str(CPS)
summary(CPS)
sort(table(CPS$MetroArea))
tapply(CPS$MetroArea, CPS$Hispanic, mean)
table(CPS$MetroArea, CPS$Hispanic)
tapply(CPS$MetroArea, CPS$Hispanic == 1, mean)
tapply(CPS$MetroArea, CPS$Hispanic == 1)
tapply(CPS$Hispanic, CPS$MetroArea)
tapply(is.na(CPS$Hispanic), CPS$MetroArea)
tapply(is.na(CPS$Hispanic), CPS$MetroArea, mean)
tapply(CPS$Hispanic, CPS$MetroArea, mean)
sort(tapply(CPS$Hispanic, CPS$MetroArea, mean))
tapply(CPS$Race == "Asian", CPS$MetroArea, mean)
sort(tapply(CPS$Race == "Asian", CPS$MetroArea, mean))
# To get mean (and related functions, like sum) to ignore missing values, you can pass the parameter na.rm=TRUE.
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm = TRUE))
str(CPS)
str(CountryMap)
str(MetroAreaMap)
# Merge in the country of birth information from the CountryMap data frame, replacing the CPS data frame with the result
CPS = merge(CPS, CountryMap, by.x="CountryOfBirthCode", by.y="Code", all.x=TRUE)
str(CPS)
summary(CPS)
table(CPS$Country)
sort(table(CPS$Country))
tapply(CPS$MetroArea = "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country, mean, na.rm = TRUE)
tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country, mean, na.rm = TRUE)
tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country != "United States", mean, na.rm = TRUE)
tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country != "United States", na.rm = TRUE)
tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country != "United States", mean, na.rm = TRUE)
tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country, mean, na.rm = TRUE)
1 - 0.04528869
table(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country != "United States")
1668 / (3736 + 1668)
table(CPS$MetroArea, CPS$Country == "India")
sort(table(CPS$MetroArea, CPS$Country == "India"))
sort(table(CPS$MetroArea, CPS$Country == "Brazil"))
table(CPS$MetroArea, CPS$Country == "Brazil")
table(CPS$MetroArea, CPS$Country == "Somalia")
sort(table(CPS$MetroArea, CPS$Country == "Somalia"))
table(CPS$Country == "India", CPS$MetroArea)
sort(table(CPS$Country == "India", CPS$MetroArea))
sort(tapply(CPS$Country == "India", CPS$MetroArea, sum, na.rm = TRUE))
sort(tapply(CPS$Country == "Brazil", CPS$MetroArea, sum, na.rm = TRUE))
sort(tapply(CPS$Country == "Somalia", CPS$MetroArea, sum, na.rm = TRUE))
setwd("~/Documents/GitHub/MIT-Analytics")
getwd
getwd()
poll = read.csv("AnonymityPoll.csv")
str(poll)
summary(poll)
table(poll$Smartphone)
is.na(poll$Smartphone)
table(is.na(poll$Smartphone))
# Table for State and Region
table(poll$State, poll$Region)
# Table for State and Region
sort(table(poll$State, poll$Region))
# Table for State and Region
table(poll$State, poll$Region)
table(poll$State, poll$Region == "South")
SouthInterviewees = subset(poll, poll$Region == "South")
table(SouthInterviewees)
table(SouthInterviewees$State)
SouthInterviewees = subset(poll, Region == "South")
table(SouthInterviewees$State)
table(SouthInterviewees$State)
SouthInterviewees = subset(poll, Region == "South")
table(SouthInterviewees$State)
table(poll$Internet.Use, poll$Smartphone)
summary(poll)
poll = read.csv("AnonymityPoll.csv", stringsAsFactors = TRUE)
str(poll)
summary(poll)
limited = subset(poll, Smartphone == 1 | Internet.Use == 1)
summary(limited)
table(limited$Info.On.Internet)
table(limited$Worry.About.Info)
386 / (404 + 386)
# Histogram for age in limited subset
hist(limited$Age)
max(table(limited$Age))
which.max(table(limited$Age))
# Plot Age against Info.On.Internet
plot(limited$Age, limited$Info.On.Internet)
table(limited$Age, limited$Info.On.Internet)
max(table(limited$Age, limited$Info.On.Internet))
jitter(c(1, 2, 3))
jitter(c(1, 2, 3))
# Plot Age against Info.On.Internet with jitter
plot(jitter(limited$Age), jitter(limited$Info.On.Internet))
tapply(limited$Info.On.Internet, limited$Smartphone, summary)
tapply(limited$TriedMaskingIdentity, limited$Smartphone, summary)
tapply(limited$TriedMaskingIdentity, limited$Smartphone, mean)
tapply(limited$Tried.Masking.Identity, limited$Smartphone, summary)
