plot(x,y, col = "green", pch = 20,
main = "Lengths of\nMajor N. American Rivers",
col.main ="red", xlab = "",
ylab = "length in miles")
# setting a seed to make a random sample reproducible, choose any number you want
set.seed(65)
clear
install.packages("plotrix")
library(plotrix)
install.packages("data.table")
# ?rivers # 141 observations
#
# x = 1:141
#
# y = rivers
#
# plot(x,y, col = "green", pch = 20,
#      main = "Lengths of\nMajor N. American Rivers",
#      col.main ="red", xlab = "",
#      ylab = "length in miles")
# ?rivers # 141 observations
#
# x = 1:141
#
# y = rivers
#
# plot(x,y, col = "green", pch = 20,
#      main = "Lengths of\nMajor N. American Rivers",
#      col.main ="red", xlab = "",
#      ylab = "length in miles")
x=5:7 # 3 data points, integers
y=8:10
# default plot output here is a scatterplot
plot(x,y)
# data is a time series, default here is a line plot
plot(lynx)
# title, color, title color, title magnification
plot(lynx, main="Lynx Trappings", col="red",
col.main=52, cex.main=1.5)
# label names
plot(lynx, ylab="Lynx Trappings", xlab="")
# label orientation
plot(lynx, ylab="Lynx Trappings", xlab="", las=2)
# changing the session paramter, 2*2 plot matrix
par(mfrow=c(2,2), col.axis="red")
plot(1:8, las=0, xlab="xlab", ylab="ylab", main="LAS = 0")
plot(1:8, las=1, xlab="xlab", ylab="ylab", main="LAS = 1")
plot(1:8, las=2, xlab="xlab", ylab="ylab", main="LAS = 2")
plot(1:8, las=3, xlab="xlab", ylab="ylab", main="LAS = 3")
colors()
?pch
x=2:4
plot(x, pch="c") # using letters as point symbols
plot(x, pch=13) # symbol nr 13
par(mfrow=c(1,1), col.axis="black") # setting parameters back to default
library(plotrix)
library(plotrix) # add on package for "ablineclip", install if not yet available
install.packages("ablineclip")
plot(1:7, ylab="", main="Line Types lty 0:6", xlab="lty 0:6") # test plot
ablineclip(v=1, lty=1, col="sienna2", lwd=2) # solid (default)
ablineclip(v=2, lty=2, col="sienna2", lwd=2) # dashed
ablineclip(v=3, lty=3, col="sienna2", lwd=2) # dotted
ablineclip(v=4, lty=4, col="sienna2", lwd=2) # dotdash
ablineclip(v=5, lty=5, col="sienna2", lwd=2) # longdash
ablineclip(v=6, lty=6, col="sienna2", lwd=5) # twodash, thicker for comparison
ablineclip(v=7, lty=0, col="sienna2", lwd=2) # blank
? plot
plot(lynx) # plot for time series data
plot(lynx, type="p", main="Type p") # points (default)
plot(lynx, type="l", main="Type l") # lines (default for time series)
plot(lynx, type="b", main="Type b") # points connected by lines
plot(lynx, type="b", main="Type c") # lines only of b
plot(lynx, type="o", main="Type o") # points overlaid by lines
plot(lynx, type="h", main="Type h") # high density
plot(lynx, type="s", main="Type s") # steps
plot(lynx, type="n", main="Type n") # no plot
par(mar=c(4,3,3,3), col.axis="darkgreen") # change of plot margins
plot(cars$speed, type="s", col="red", bty="n", xlab="Cars ID", ylab="")
text(8, 14, "Speed in mph", cex=0.85, col="red") # adding the explanatory text to plot 1
par(new=T) # allows 2 in 1 plot
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=4, col = "darkblue") # y axis for plot 2
text(37, 18, "Stopping distance in ft", cex=0.85, col="darkblue") # explanations to plot 2
title(main="Speed and Stopping\n Distances of Cars") # main title
?par
par()
rivers
?rivers
x = rivers
plot(x)
title(main="Lengths of Major North American Rivers")
title(main="Lengths of Major North American Rivers", col='red')
title(main="Lengths of Major North American Rivers", col="red")
title(main="Lengths of Major North American Rivers", col.main="red")
?rivers
plot(x, xlab="Number of Observations", ylab="Length (Miles)")
title(main="Lengths of Major North American Rivers", col.main="red")
plot(x, xlab="Number of Observations", ylab="Length (Miles)")
plot(x, xlab="", ylab="Length (Miles)")
plot(x, xlab="", ylab="Length (Miles)")
plot(x, xlab="", ylab="Length")
plot(x, xlab="", ylab="Length")
plot(x, xlab="", ylab="Length", main="Lengths of Major North American Rivers", col.main="red")
plot(x, main="Lengths of Major North American Rivers", col.main="red", xlab="", ylab="Length")
plot(x, main="Lengths of Major North American Rivers", col.main="red", xlab="", ylab="Length")
plot(x,y, col = "green", pch = 20,
main = "Lengths of\nMajor N. American Rivers",
col.main ="red", xlab = "",
ylab = "length in miles")
plot(x, y, main="Lengths of Major North American Rivers", col.main="red", xlab="", ylab="Length")
?rivers # 141 observations
x = 1:141
y = rivers
plot(x,y, col = "green", pch = 20,
main = "Lengths of\nMajor N. American Rivers",
col.main ="red", xlab = "",
ylab = "length in miles")
plot(x, y, main="Lengths of Major North American Rivers", pch = 20, col.main="red", xlab="", ylab="Length")
plot(x, y, main="Lengths of Major North American Rivers", col='cerulean', pch = 20, col.main="red", xlab="", ylab="Length")
plot(x, y, main="Lengths of Major North American Rivers", col='wheat', pch = 20, col.main="red", xlab="", ylab="Length")
?rivers # 141 observations
x = 1:141
y = rivers
plot(x,y, col = "green", pch = 20,
main = "Lengths of\nMajor N. American Rivers",
col.main ="red", xlab = "",
ylab = "length in miles")
plot(x, y, main="Lengths of Major North American Rivers", type = 's',
col='wheat', pch = 20, col.main="red", xlab="", ylab="Length")
plot(x, y, main="Lengths of Major North American Rivers", type = 'p',
col='wheat', pch = 20, col.main="red", xlab="", ylab="Length")
plot(x, y, main="Lengths of Major North American Rivers", type = 'b',
col='wheat', pch = 20, col.main="red", xlab="", ylab="Length")
plot(x, y, main="Lengths of Major North American Rivers", type = 'p',
col='wheat', pch = 20, col.main="red", xlab="", ylab="Length")
plot(x, y, main="Lengths of \nMajor North American Rivers", type = 'p',
col='wheat', pch = 20, col.main="red", xlab="", ylab="Length")
plot(x,y, col = "green", pch = 20,
main = "Lengths of\nMajor N. American Rivers",
col.main ="red", xlab = "",
ylab = "length in miles")
plot(x, y, main="Lengths of \nMajor North American Rivers", type = 'p',
col='wheat', pch = 20, col.main="red", xlab="", ylab="Anyone?")
plot(x, y, main="Lengths of \nMajor North American Rivers", type = 'p',
col='wheat', pch = 20, col.main="red", xlab="", ylab="Length in miles")
text(60, 3500, "Longest river")
remove(x)
remove(y)
SearchResults <- read.csv("~/Downloads/SearchResults.csv")
View(SearchResults)
View(SearchResults)
?apply
x = matrix(c(1:9), nr - 3, byrow - T)
x = matrix(c(1:9), nr = 3, byrow = T)
apply(x, 2, mean)
apply(x, 1, mean)
apply(x, 2, mean)
x
apply(x, 1, plot)
install.packages("ggplot2")
?diamonds
??diamonds
diamonds$depth
head(diamonds)
library(ggplot2)
head(diamonds)
attach(diamonds)
remove(SearchResults)
remove(x)
??diamonds
head(diamonds)
attach(diamonds)
head(diamonds)
attach(diamonds)
library(ggplot2)
head(diamonds)
attach(diamonds)
ggnorm(depth)
qqnorm(depth)
hist(depth)
n <- 10
1:n-1
1:(n-1)
alpha <- 1:10
alpha <- alpha[2 * 1:5]
alpha <- alpha[2 * 0:4]
alpha <- alpha[2 * 1:5]
alpha <- 1:10
alpha <- alpha[2 * 1:5]
alpha <- 1:10
alpha <- alpha[2 * 0:4]
alpha <- 1:10
alpha <- alpha[1 * 1:5]
setwd("~/Documents/GitHub/MIT-Analytics/Unit 7 Visualization")
intl = read.csv("intl.csv")
str(intl)
ggplot(intl, aes(x=Region, y=PercentOfIntl)) + geom_bar(stat="identity") + geom_text(aes(label=PercentOfIntl))
library(ggplot2)
library(ggmap)
library(mapproj)
ggplot(intl, aes(x=Region, y=PercentOfIntl)) + geom_bar(stat="identity") + geom_text(aes(label=PercentOfIntl))
# What we need to do is make Region an ordered factor instead of an unordered factor.
# Region is reordered based on decreasing order of PercentOfIntl.
intl = transform(intl, Region = reorder(Region, -PercentOfIntl))
str(intl)
# Multiply all values by 100 so they're no longer between 0 and 1.
intl$PercentOfIntl = intl$PercentOfIntl * 100
# So we've got our labels vjust-ed above the columns.
# The bars themselves are dark blue.
# The numbers are now between 0 and 100, instead of zero and one.
# We can read all the text labels.
# And it's generally a lot more readable than the pie plot or our original ggplot, at that.
ggplot(intl, aes(x=Region, y=PercentOfIntl)) +
geom_bar(stat="identity", fill="dark blue") +
geom_text(aes(label=PercentOfIntl), vjust=-0.4) +
ylab("Percent of International Students") +
theme(axis.title.x = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1))
intlall = read.csv("intlall.csv", stringsAsFactors = FALSE)
str(intlall)
# Change all NA's to zeros
intlall[is.na(intlall)] = 0
str(intlall)
# Load the world map
world_map = map_data("world")
str(world_map)
# Merge the world_map and intlall data frames into one
world_map = merge(world_map, intlall, by.x="region", by.y="Citizenship")
str(world_map)
# Plot the world map
install.packages("mapproj")
install.packages("mapproj")
ggplot(world_map, aes(x=long, y=lat, group=group)) + geom_polygon(fill="white", color="black") + coord_map("mercator")
# We have to reorder the data in the correct order to create a correct map.
world_map = world_map[order(world_map$group, world_map$order),]
ggplot(world_map, aes(x=long, y=lat, group=group)) + geom_polygon(fill="white", color="black") + coord_map("mercator")
# Some of the countries are missing.
table(intlall$Citizenship)
# Change the MIT data frame so China (People'S Republic Of) to China
intlall[intlall$Citizenship == "China (People's Republic Of)"] = "China"
# Change the MIT data frame so China (People'S Republic Of) to China
intlall$Citizenship[intlall$Citizenship == "China (People's Republic Of)"] = "China"
table(intlall$Citizenship)
# Merge and reorder again
world_map = merge(world_map, intlall, by.x="region", by.y="Citizenship")
world_map = world_map[order(world_map$group, world_map$order),]
# Plot the map
ggplot(world_map, aes(x=long, y=lat, group=group)) + geom_polygon(aes(fill=Total), color="black") + coord_map("mercator")
# Plot the map
ggplot(world_map, aes(x=long, y=lat, group=group)) + geom_polygon(fill=Total, color="black") + coord_map("mercator")
ggplot(world_map, aes(x=long, y=lat, group=group)) + geom_polygon(aes(fill="white"), color="black") + coord_map("mercator")
# Change the MIT data frame so China (People'S Republic Of) to China
intlall$Citizenship[intlall$Citizenship == "China (People's Republic Of)"] = "China"
table(intlall$Citizenship)
# Merge and reorder again
world_map = merge(world_map, intlall, by.x="region", by.y="Citizenship")
world_map = world_map[order(world_map$group, world_map$order),]
str(world_map)
# Plot the map
ggplot(world_map, aes(x=long, y=lat, group=group)) + geom_polygon(aes(fill=Total), color="black") + coord_map("mercator")
ggplot(world_map[abs(world_map$long) < 180,], aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=Total), color="black") +
coord_map("mercator")
# Orthographic projection
ggplot(world_map[abs(world_map$long) < 180,], aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=Total), color="black") +
coord_map("ortho", orientation=c(20, 30, 0) )
table(world_map$region)
table(world_map$group)
table(world_map$group, world_map$region)
# Load the world map
world_map = map_data("world")
str(world_map)
world_map$group[world_map$region=="China"]
table(world_map$group == 430, world_map$region)
# Merge the world_map and intlall data frames into one
world_map = merge(world_map, intlall, by.x="region", by.y="Citizenship")
str(world_map)
ggplot(world_map, aes(x=long, y=lat, group=group)) + geom_polygon(fill="white", color="black") + coord_map("mercator")
ggplot(world_map, aes(x=long, y=lat, group=group)) + geom_polygon(fill="white", color="black") + coord_map("mercator")
# We have to reorder the data in the correct order to create a correct map.
# Order the rows based on the group variable and then the order variable.
# The group is equivalent to the country basically.
# The order is the correct order for the border points.
world_map = world_map[order(world_map$group, world_map$order),]
# We have to reorder the data in the correct order to create a correct map.
# Order the rows based on the group variable and then the order variable.
# The group is equivalent to the country basically.
# The order is the correct order for the border points.
world_map = world_map[order(world_map$group, world_map$order),]
